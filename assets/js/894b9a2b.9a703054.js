"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[6638],{3382:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=s(4848),t=s(8453);const a={title:"Test en Laravel",sidebar_label:"Test en Laravel",sidebar_position:1},o="Test con PHP Unit",i={id:"00laravel/test",title:"Test en Laravel",description:"1. Crear proyecto:",source:"@site/docs/00laravel/test.md",sourceDirName:"00laravel",slug:"/00laravel/test",permalink:"/documentos2024/docs/00laravel/test",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/00laravel/test.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Test en Laravel",sidebar_label:"Test en Laravel",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Apuntes de Laravel 10",permalink:"/documentos2024/docs/00laravel/laravel10"},next:{title:"Proyectos Laravel",permalink:"/documentos2024/docs/category/proyectos-laravel"}},l={},c=[];function d(e){const r={admonition:"admonition",code:"code",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"test-con-php-unit",children:"Test con PHP Unit"}),"\n",(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsxs)(r.li,{children:["Crear proyecto:","\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"laravel new test\n"})}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["Crear base de datos ",(0,n.jsx)(r.strong,{children:"test"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:["Ejecutar las migraciones:","\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"php artisan migrate\n"})}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["Crear test de caracter\xedsticas ",(0,n.jsx)(r.strong,{children:"UserTest"}),":","\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"php artisan make:test UserTest\n"})}),"\n",(0,n.jsxs)(r.admonition,{title:"Nota",type:"tip",children:[(0,n.jsx)(r.p,{children:"Esta acci\xf3n creara un archivo de test en:"}),(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"tests\\Feature\\UserTest.php"}),"\n"]})]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["Crear test unitario ",(0,n.jsx)(r.strong,{children:"UserTest"}),":","\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"php artisan make:test UserTest --unit\n"})}),"\n",(0,n.jsxs)(r.admonition,{title:"Nota",type:"tip",children:[(0,n.jsx)(r.p,{children:"Esta acci\xf3n creara un archivo de test en:"}),(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"tests\\Unit\\UserTest.php"}),"\n"]})]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["Programar el test de caracter\xedsticas ",(0,n.jsx)(r.strong,{children:"UserTest"}),":","\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",metastring:'title="tests\\Feature\\UserTest.php"',children:"// ...\r\nclass UserTest extends TestCase\r\n{\r\n    // Test que comprueba que la lista de usuarios se obtiene correctamente\r\n    public function test_get_users_list(): void\r\n    {\r\n        // Llama a la ruta /users\r\n        $response = $this->get('/api/users');\r\n        // Comprueba que la respuesta es exitosa\r\n        $response->assertStatus(200);\r\n        // Comprueba que la estructura de datos es la eperada\r\n        $response->assertJsonStructure([\r\n            [\r\n                'id', 'name', 'email', 'email_verified_at', 'created_at', 'updated_at'\r\n            ]\r\n        ]);\r\n        // Comprobamos que hay un usuario con el nombre Pedro\r\n        $response->assertJsonFragment([\r\n            'name' => 'Pedro',\r\n        ]);\r\n        // Comprobamos que se trae todos los usuarios que esperamos\r\n        $response->assertJsonCount(4);\r\n    }\r\n\r\n    // Test que comprueba que un usuario se obtiene correctamente\r\n    public function test_get_user_datail(): void\r\n    {\r\n        // Llama a la ruta /users/1 que trae el usuario con id 1\r\n        $response = $this->get('/api/users/1');\r\n        // Comprueba que la respuesta es exitosa\r\n        $response->assertStatus(200);\r\n        // Comprueba que la estructura de datos es la eperada\r\n        $response->assertJsonStructure([\r\n            'id', 'name', 'email', 'email_verified_at', 'created_at', 'updated_at'\r\n        ]);\r\n        // Comprobamos que el usuario tiene el nombre Pedro\r\n        $response->assertJsonFragment([\r\n            'name' => 'Pedro',\r\n        ]);\r\n    }\r\n\r\n    // Test que comprueba que un usuario no existe\r\n    public function test_get_user_not_found(): void\r\n    {\r\n        // Llama a la ruta /users/100 que trae el usuario con id 100 que no existe\r\n        $response = $this->get('/api/users/100');\r\n        // Comprueba que la respuesta es 404\r\n        $response->assertStatus(404);\r\n    }\r\n}    \n"})}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["Crear archivo de variables de entorno de prueba ",(0,n.jsx)(r.strong,{children:".env.testing"})," creando una copia de ",(0,n.jsx)(r.strong,{children:".env"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:["Crear base de datos para pruebas ",(0,n.jsx)(r.strong,{children:"testing"})," y configurar el ",(0,n.jsx)(r.strong,{children:".env.testing"})," con esta base de datos."]}),"\n",(0,n.jsxs)(r.li,{children:["Ejcutar los test:","\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"php artisan test\n"})}),"\n",(0,n.jsx)(r.admonition,{title:"Resumen del resultado de los test en este punto.",type:"tip",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"FAIL  Tests\\Feature\\UserTest\r\n\u2a2f get users list                                                                                                                                     0.80s  \r\n\u2a2f get user datail                                                                                                                                    0.01s  \r\n\u2713 get user not found      \n"})})}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["Cambios en la aplicaci\xf3n para luego probar nuevamente los test:","\n",(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsxs)(r.li,{children:["Modificar test de caracter\xedsticas ",(0,n.jsx)(r.strong,{children:"UserTest"}),":","\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",metastring:'title="tests\\Feature\\UserTest.php"',children:"// ...\r\nuse Illuminate\\Support\\Facades\\Artisan;\r\n\r\nclass UserTest extends TestCase\r\n{\r\n    public function test_set_database_config(): void {\r\n        Artisan::call('migrate:reset');\r\n        Artisan::call('migrate');\r\n        Artisan::call('db:seed');\r\n\r\n        $response = $this->get('/');\r\n        $response->assertStatus(200);\r\n    }\r\n    // ...            \r\n}\n"})}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["Modificar seeder ",(0,n.jsx)(r.strong,{children:"DatabaseSeeder"})," para poder crear usuarios de prueba:","\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",metastring:'title="database\\seeders\\DatabaseSeeder.php"',children:"use Illuminate\\Support\\Facades\\Hash;\r\n\r\nclass DatabaseSeeder extends Seeder\r\n{\r\n    // ...\r\n    public function run(): void\r\n    {\r\n        \\App\\Models\\User::factory()->create([\r\n            'name' => 'Pedro',\r\n            'email' => 'test@example.com',\r\n            'password' => Hash::make('password'),\r\n        ]);        \r\n        \\App\\Models\\User::factory(3)->create();\r\n    }\r\n}        \n"})}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["Crear controlador ",(0,n.jsx)(r.strong,{children:"UserController"}),":","\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"php artisan make:controller UserController\n"})}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["Programar controlador ",(0,n.jsx)(r.strong,{children:"UserController.php"}),":","\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",metastring:'title="app\\Http\\Controllers\\UserController.php"',children:"// ...\r\nuse App\\Models\\User;\r\n// ...\r\nclass UserController extends Controller\r\n{\r\n    public function index() {\r\n        $users = User::all();\r\n        return response()->json($users);\r\n    }\r\n\r\n    public function user($id) {\r\n        $user = User::find($id);\r\n        if($user == null) return response()->json(['message' => 'User not found'], 404);\r\n        return response()->json($user);\r\n    }\r\n}        \n"})}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["Establecer rutas api:","\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",metastring:'title="routes\\api.php"',children:"// ...\r\nuse App\\Http\\Controllers\\UserController;\r\n// ...\r\nRoute::get('/users', [UserController::class, 'index']);\r\nRoute::get('/users/{id}', [UserController::class, 'user']);\n"})}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(r.admonition,{title:"Nota",type:"tip",children:[(0,n.jsxs)(r.p,{children:["Para Ejecutar la migraci\xf3n utilizando el archivo de variable de entorno ",(0,n.jsx)(r.strong,{children:".env.testing"}),":"]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:'php artisan migrate --env="testing"\n'})})]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["Ejcutar los test:","\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"php artisan test\n"})}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>o,x:()=>i});var n=s(6540);const t={},a=n.createContext(t);function o(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);