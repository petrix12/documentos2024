"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[6638],{3382:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=r(4848),t=r(8453);const a={title:"Test en Laravel",sidebar_label:"Test en Laravel",sidebar_position:1},o="Test con PHP Unit",i={id:"00laravel/test",title:"Test en Laravel",description:"1. Crear proyecto:",source:"@site/docs/00laravel/test.md",sourceDirName:"00laravel",slug:"/00laravel/test",permalink:"/documentos2024/docs/00laravel/test",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/00laravel/test.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Test en Laravel",sidebar_label:"Test en Laravel",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Sistema de Historia Cl\xednica",permalink:"/documentos2024/docs/00laravel/proyectos/2020_08_clinica"},next:{title:"Cursos Laravel",permalink:"/documentos2024/docs/category/cursos-laravel"}},l={},c=[];function u(e){const s={admonition:"admonition",code:"code",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"test-con-php-unit",children:"Test con PHP Unit"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsxs)(s.li,{children:["Crear proyecto:","\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"laravel new test\n"})}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["Crear base de datos ",(0,n.jsx)(s.strong,{children:"test"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:["Ejecutar las migraciones:","\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"php artisan migrate\n"})}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["Crear test de caracter\xedsticas ",(0,n.jsx)(s.strong,{children:"UserTest"}),":","\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"php artisan make:test UserTest\n"})}),"\n",(0,n.jsxs)(s.admonition,{title:"Nota",type:"tip",children:[(0,n.jsx)(s.p,{children:"Esta acci\xf3n creara un archivo de test en:"}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"tests\\Feature\\UserTest.php"}),"\n"]})]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["Crear test unitario ",(0,n.jsx)(s.strong,{children:"UserTest"}),":","\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"php artisan make:test UserTest --unit\n"})}),"\n",(0,n.jsxs)(s.admonition,{title:"Nota",type:"tip",children:[(0,n.jsx)(s.p,{children:"Esta acci\xf3n creara un archivo de test en:"}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"tests\\Unit\\UserTest.php"}),"\n"]})]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["Programar el test de caracter\xedsticas ",(0,n.jsx)(s.strong,{children:"UserTest"}),":","\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-php",metastring:'title="tests\\Feature\\UserTest.php"',children:"// ...\r\nclass UserTest extends TestCase\r\n{\r\n    // Test que comprueba que la lista de usuarios se obtiene correctamente\r\n    public function test_get_users_list(): void\r\n    {\r\n        // Llama a la ruta /users\r\n        $response = $this->get('/users');\r\n        // Comprueba que la respuesta es exitosa\r\n        $response->assertStatus(200);\r\n        // Comprueba que la estructura de datos es la eperada\r\n        $response->assertJsonStructure([\r\n            [\r\n                'id', 'name', 'email', 'email_verified_at', 'created_at', 'updated_at'\r\n            ]\r\n        ]);\r\n        // Comprobamos que hay un usuario con el nombre Pedro\r\n        $response->assertJsonFragment([\r\n            'name' => 'Pedro',\r\n        ]);\r\n        // Comprobamos que se trae todos los usuarios que esperamos\r\n        $response->assertJsonCount(4);\r\n    }\r\n\r\n    // Test que comprueba que un usuario se obtiene correctamente\r\n    public function test_get_user_datail(): void\r\n    {\r\n        // Llama a la ruta /users/1 que trae el usuario con id 1\r\n        $response = $this->get('/users/1');\r\n        // Comprueba que la respuesta es exitosa\r\n        $response->assertStatus(200);\r\n        // Comprueba que la estructura de datos es la eperada\r\n        $response->assertJsonStructure([\r\n            'id', 'name', 'email', 'email_verified_at', 'created_at', 'updated_at'\r\n        ]);\r\n        // Comprobamos que el usuario tiene el nombre Pedro\r\n        $response->assertJsonFragment([\r\n            'name' => 'Pedro',\r\n        ]);\r\n    }\r\n\r\n    // Test que comprueba que un usuario no existe\r\n    public function test_get_user_not_found(): void\r\n    {\r\n        // Llama a la ruta /users/100 que trae el usuario con id 100 que no existe\r\n        $response = $this->get('/users/100');\r\n        // Comprueba que la respuesta es 404\r\n        $response->assertStatus(404);\r\n    }\r\n}    \n"})}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["Crear archivo de variables de entorno de prueba ",(0,n.jsx)(s.strong,{children:".env.testing"})," creando una copia de ",(0,n.jsx)(s.strong,{children:".env"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:["Crear base de datos para pruebas ",(0,n.jsx)(s.strong,{children:"testing"})," y configurar el ",(0,n.jsx)(s.strong,{children:".env.testing"})," con esta base de datos."]}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>o,x:()=>i});var n=r(6540);const t={},a=n.createContext(t);function o(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);