"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[3278],{3378:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var t=r(4848),s=r(8453);const i={title:"Apuntes de Solidity",sidebar_label:"Apuntes de Solidity",sidebar_position:1},a="Apuntes de Solidity",o={id:"15blockchain/solidity",title:"Apuntes de Solidity",description:"Introducci\xf3n a Smart Contracts con Solidity (Ethereum, Polygon, BSC)",source:"@site/docs/15blockchain/solidity.md",sourceDirName:"15blockchain",slug:"/15blockchain/solidity",permalink:"/documentos2024/docs/15blockchain/solidity",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/15blockchain/solidity.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Apuntes de Solidity",sidebar_label:"Apuntes de Solidity",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Apuntes Blockchain",permalink:"/documentos2024/docs/category/apuntes-blockchain"},next:{title:"Apuntes Estilos",permalink:"/documentos2024/docs/category/apuntes-estilos"}},l={},c=[{value:"Introducci\xf3n a Smart Contracts con Solidity (Ethereum, Polygon, BSC)",id:"introducci\xf3n-a-smart-contracts-con-solidity-ethereum-polygon-bsc",level:2},{value:"Construcci\xf3n de un Smart Contracts",id:"construcci\xf3n-de-un-smart-contracts",level:3},{value:"Tipos de datos",id:"tipos-de-datos",level:3},{value:"Comunicaci\xf3n entre Smart Contracts",id:"comunicaci\xf3n-entre-smart-contracts",level:3},{value:"Crear un token",id:"crear-un-token",level:3}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"apuntes-de-solidity",children:"Apuntes de Solidity"}),"\n",(0,t.jsx)(e.h2,{id:"introducci\xf3n-a-smart-contracts-con-solidity-ethereum-polygon-bsc",children:"Introducci\xf3n a Smart Contracts con Solidity (Ethereum, Polygon, BSC)"}),"\n",(0,t.jsx)(e.h3,{id:"construcci\xf3n-de-un-smart-contracts",children:"Construcci\xf3n de un Smart Contracts"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["Ir a ",(0,t.jsx)(e.a,{href:"https://remix.ethereum.org/#lang=en&optimize=false&runs=200&evmVersion=null&version=soljson-v0.8.25+commit.b61c2a91.js",children:"REMIX IDE"})]}),"\n",(0,t.jsxs)(e.li,{children:["Crear un nuevo archivo dentro de la carpeta de ",(0,t.jsx)(e.strong,{children:"contracts"})," y llamarlo ",(0,t.jsx)(e.strong,{children:"example.sol"}),":","\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sol",metastring:'title="default_workspace/contracts/example.sol"',children:'pragma solidity ^0.8.12;\r\n\r\ncontract Example {\r\n    uint number;\r\n    address owner; // variable de protecci\xf3n del propietario del contrato\r\n\r\n    constructor () {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender, "ERROR: Solo el propietario puede ejecutar esta accion");\r\n        _;\r\n    }\r\n\r\n    function setNumber(uint x) public onlyOwner {\r\n        // require(owner == msg.sender, "ERROR: Solo el propietario puede ejecutar esta accion");\r\n        number = x;\r\n    }\r\n\r\n    function getNumber() public view returns(uint) {\r\n        return number;\r\n    }\r\n\r\n    /*\r\n    // Funci\xf3n que recepciona Criptomoneda\r\n    function invitemeaCoffee() public payable {\r\n        require(msg.value == 7777);\r\n    }\r\n    */\r\n}   \n'})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["Compilar contrato:","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Ir a ",(0,t.jsx)(e.strong,{children:"Solidity compiler"}),"."]}),"\n",(0,t.jsxs)(e.li,{children:["Seleccionar la versi\xf3n de ",(0,t.jsx)(e.strong,{children:"Solidity"})," especificada (^0.8.12)."]}),"\n",(0,t.jsxs)(e.li,{children:["Clic en el bot\xf3n ",(0,t.jsx)(e.strong,{children:"Compile example.sol"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["Desplegar controto:","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Ir a ",(0,t.jsx)(e.strong,{children:"Deploy & run transactions"}),"."]}),"\n",(0,t.jsxs)(e.li,{children:["Clic en ",(0,t.jsx)(e.strong,{children:"Deploy"}),"."]}),"\n",(0,t.jsx)(e.li,{children:"Probar contrato en: EXAMPLE AT X0xd9145CCE52D386f254917e481eB44e9943F39138"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"tipos-de-datos",children:"Tipos de datos"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["Crear un nuevo archivo dentro de la carpeta de ",(0,t.jsx)(e.strong,{children:"contracts"})," y llamarlo ",(0,t.jsx)(e.strong,{children:"examplesTypes.sol"}),":","\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sol",metastring:'title="default_workspace/contracts/examplesTypes.sol"',children:"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n// uint256: Entero sin signo\r\n// address: Propietario de un contrato\r\n// bool: Valor booleano\r\n// mapping: Estructura clave valor\r\ncontract example {\r\n    uint256 amount = 1;\r\n    uint256 decimals = 18;\r\n    uint256 result = amount * 10**decimals;\r\n\r\n    mapping(address => uint256) private balances;\r\n\r\n    function getBalance(address addr_) public view returns(uint256) {\r\n        return balances[addr_];\r\n    }\r\n\r\n    function setBalance(address addr_, uint value_) public returns(bool) {\r\n        balances[addr_] = value_;\r\n        return true;\r\n    }\r\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"comunicaci\xf3n-entre-smart-contracts",children:"Comunicaci\xf3n entre Smart Contracts"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["Crear un nuevo archivo dentro de la carpeta de ",(0,t.jsx)(e.strong,{children:"contracts"})," y llamarlo ",(0,t.jsx)(e.strong,{children:"examplesTypes.sol"}),":","\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sol",metastring:'title="default_workspace/contracts/Randomize.sol"',children:"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ncontract Randomize {\r\n    function getRandomNumber() external view returns(uint256) {\r\n        return block.timestamp % 9;\r\n    }\r\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["Crear un nuevo archivo dentro de la carpeta de ",(0,t.jsx)(e.strong,{children:"contracts"})," y llamarlo ",(0,t.jsx)(e.strong,{children:"examplesTypes.sol"}),":","\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sol",metastring:'title="default_workspace/contracts/UseRandomize.sol"',children:"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface IRandomize {\r\n    function getRandomNumber() external view returns(uint256);\r\n}\r\n\r\ncontract UsingRandomize {\r\n    function useRandomize(address contractAddress_) public view returns(uint256) {\r\n        IRandomize randomize = IRandomize(address(contractAddress_));\r\n        return randomize.getRandomNumber();\r\n    }\r\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"crear-un-token",children:"Crear un token"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["C\xf3digo del standar ERC20: ",(0,t.jsx)(e.a,{href:"https://github.com/JJRuizDeveloper/solidity",children:"https://github.com/JJRuizDeveloper/solidity"})]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sol",metastring:'title="solidity/NFT.sol"',children:'// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.3;\r\n\r\nimport "@openzeppelin/contracts/utils/Counters.sol";\r\nimport "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";\r\nimport "@openzeppelin/contracts/token/ERC721/ERC721.sol";\r\n\r\ncontract PixlNFT is ERC721URIStorage { \r\n\r\n    using Counters for Counters.Counter; \r\n    Counters.Counter private _tokenIds;\r\n\r\n    constructor() ERC721("ExampleNFT", "ENFT") {\r\n    }\r\n\r\n    function createToken(string memory tokenURI) public payable returns (uint) {\r\n        require(msg.value >= 1000000000000000000, "Not enough EHT sent; check price!");\r\n        _tokenIds.increment();\r\n        uint256 newItemId = _tokenIds.current();\r\n\r\n        _mint(msg.sender, newItemId);\r\n        _setTokenURI(newItemId, tokenURI);\r\n\r\n        return newItemId;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sol",metastring:'title="solidity/token.sol"',children:'// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.12;\r\n\r\ninterface IERC20 {   \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity 0.8.12;\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint256);\r\n}\r\n\r\npragma solidity 0.8.12;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity 0.8.12;\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    uint256 private _decimals;\r\n    string private _name;\r\n    string private _symbol;\r\n    address private _owner;\r\n\r\n    constructor (string memory name_, string memory symbol_,uint256 initialBalance_,uint256 decimals_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _totalSupply = initialBalance_* 10**decimals_;\r\n        _balances[msg.sender] = _totalSupply;\r\n        _decimals = decimals_;\r\n        _owner = msg.sender;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, "Transfer amount exceeds allowance");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n   \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, "Decreased allowance below zero");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), "Transfer from the zero address");\r\n        require(recipient != address(0), "Transfer to the zero address");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, "Transfer amount exceeds balance");\r\n\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), "Approve from the zero address");\r\n        require(spender != address(0), "Approve to the zero address");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /*function mint(uint256 amount) public returns(bool) {\r\n        require(msg.sender == _owner, "Only the owner can mint new tokens");\r\n        _totalSupply += amount;\r\n        _balances[_owner] += amount;\r\n        emit Transfer(address(0), _owner, amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 amount) public returns(bool) {\r\n        require(_balances[msg.sender] >= amount, "Amount exceeded");\r\n        _totalSupply -= amount;\r\n        _balances[msg.sender] -= amount;\r\n        emit Burn(msg.sender, amount);\r\n        return true;\r\n    }*/\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract MyToken is ERC20 {\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 decimals_,\r\n        uint256 initialBalance_,\r\n        address payable feeReceiver_\r\n    ) payable ERC20(name_, symbol_,initialBalance_,decimals_) {\r\n        payable(feeReceiver_).transfer(msg.value);\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["Crear un nuevo archivo dentro de la carpeta de ",(0,t.jsx)(e.strong,{children:"contracts"})," y llamarlo ",(0,t.jsx)(e.strong,{children:"mytoken.sol"}),", en el copiar el c\xf3digo del standar ERC20 ",(0,t.jsx)(e.strong,{children:"token.sol"})," y compilarlo, desplegarlo y probarlo."]}),"\n"]}),"\n",(0,t.jsxs)(e.admonition,{title:"Despliegue",type:"tip",children:[(0,t.jsx)(e.p,{children:"Para el despliegue proporcionar los siguientes valores:"}),(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"NAME_: ejemplo"}),"\n",(0,t.jsx)(e.li,{children:"SYMBOL_: tkn"}),"\n",(0,t.jsx)(e.li,{children:"DECIMALS_: 18"}),"\n",(0,t.jsx)(e.li,{children:"INITIALBALANCE_: 10000"}),"\n",(0,t.jsx)(e.li,{children:"FEERECEIVER_: 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4 (Direcci\xf3n del due\xf1o del contrato)"}),"\n"]})]}),"\n",(0,t.jsxs)(e.admonition,{title:"Pruebas",type:"tip",children:[(0,t.jsx)(e.p,{children:"Para las pruebas comenzar en este orden:"}),(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"balanceOf: 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4"}),"\n",(0,t.jsx)(e.li,{children:"name"}),"\n",(0,t.jsx)(e.li,{children:"symbol"}),"\n",(0,t.jsx)(e.li,{children:"totalSupply"}),"\n",(0,t.jsx)(e.li,{children:"decimals"}),"\n"]})]}),"\n",(0,t.jsx)(e.admonition,{title:"Hacer una transferencia",type:"tip",children:(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"recipient: 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2"}),"\n",(0,t.jsx)(e.li,{children:"amount: 1000"}),"\n"]})})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>o});var t=r(6540);const s={},i=t.createContext(s);function a(n){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);